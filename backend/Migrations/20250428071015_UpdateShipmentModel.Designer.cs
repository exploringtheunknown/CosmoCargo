// <auto-generated />
using System;
using CosmoCargo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CosmoCargo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428071015_UpdateShipmentModel")]
    partial class UpdateShipmentModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HasInsurance")
                        .HasColumnType("boolean")
                        .HasColumnName("has_insurance");

                    b.Property<Guid?>("PilotId")
                        .HasColumnType("uuid")
                        .HasColumnName("pilot_id");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("p_k_shipments");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PilotId");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("CosmoCargo.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Experience")
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
                {
                    b.HasOne("CosmoCargo.Model.User", "Customer")
                        .WithMany("CustomerShipments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CosmoCargo.Model.User", "Pilot")
                        .WithMany("PilotShipments")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("CosmoCargo.Model.ShipmentContact", "Receiver", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Planet")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Station")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipments");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.OwnsOne("CosmoCargo.Model.ShipmentContact", "Sender", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Planet")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("planet");

                            b1.Property<string>("Station")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("station");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("shipment_contact");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Pilot");

                    b.Navigation("Receiver")
                        .IsRequired();

                    b.Navigation("Sender")
                        .IsRequired();
                });

            modelBuilder.Entity("CosmoCargo.Model.User", b =>
                {
                    b.Navigation("CustomerShipments");

                    b.Navigation("PilotShipments");
                });
#pragma warning restore 612, 618
        }
    }
}
